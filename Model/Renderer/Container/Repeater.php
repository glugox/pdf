<?php
/**
 * This file is part of Glugox.
 *
 * (c) Glugox <glugox@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Glugox\PDF\Model\Renderer\Container;


use Glugox\PDF\Exception\PDFException;


class Repeater extends \Glugox\PDF\Model\Renderer\Container\AbstractRenderer
{


    /**
     * Repeater takes the first xml child element and clones it
     * as long as the data passed.
     */

    /**
     * @var array
     */
    protected $_items = [];


    /**
     * Total number of items rendered
     * in this block
     *
     * @var int
     */
    protected $_nItemsRendered = 0;

    /**
     * Number of items rendered on
     * the current page
     *
     * @var int
     */
    protected $_nItemsRenderedOnPage = 0;


    /**
     * @var \Glugox\PDF\Model\Renderer\RendererFactory
     */
    protected $_rendererFactory = false;

    /**
     * Element constructor.
     *
     * @param string $type
     * @param int $order
     * @param string $style
     */
    public function __construct($type, $order, $style, $src, \Glugox\PDF\Model\Renderer\RendererFactory $rendererFactory)
    {
        parent::__construct($type, $order, $style, $src);
        $this->_rendererFactory = $rendererFactory;
    }


    /**
     * Initializes data needed for rendering
     * of this element.
     */
    public function initialize(\Glugox\PDF\Model\Page\Config $config = null)
    {
        $this->_createItems();
        parent::initialize($config);


    }


    /**
     * Creates child blocks using src as data provider.
     */
    protected function _createItems(){


        // make sure we have the source parsed, becouse we are calling
        // this method before parent::initialize
        $this->_parseSource();

        /** @var \Glugox\PDF\Model\Renderer\Container\RendererInterface $child */
        $child = $this->getChild("repeater-item");
        if(!$child){
            throw new PDFException(__("Repeater must have child item with name 'repeater-item'!"));
        }

        $order = 1;

        /**
         * Remove all children
         */
        $this->_children = [];

        /**
         * Create children
         */
        $this->_items = $this->getSrc();

        foreach ($this->_items as $item) {

            $rendererInstance = clone $child;
            $rendererInstance->setSrc($item);
            $rendererInstance->setOrder($order);
            $rendererInstance->setName("repeater-item-" . $item->getId());
            $this->addChild($rendererInstance);

            ++$order;
        }
    }


    /**
     * Updates children properties needed for rendering
     * like bounding box (x,y,width,height) after page state
     * is changed (like rendered new element)
     */
    public function updateLayout()
    {
        parent::updateLayout();
    }

    /**
     * @return \Zend_Pdf $pdf
     */
    public function render()
    {
        if($this->hasChildren()) {
            foreach ($this->getChildren() as $child) {
                $child->setParent($this);
            }
        }
        return parent::render();
    }


    /**
     * Actions after new pdf page is created
     */
    public function handleNewPage()
    {
        parent::handleNewPage(); // TODO: Change the autogenerated stub
    }
    
}